#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectWPF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="database")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMusicGroup(MusicGroup instance);
    partial void UpdateMusicGroup(MusicGroup instance);
    partial void DeleteMusicGroup(MusicGroup instance);
    partial void InsertSong(Song instance);
    partial void UpdateSong(Song instance);
    partial void DeleteSong(Song instance);
    partial void InsertMusicGroup_Musician(MusicGroup_Musician instance);
    partial void UpdateMusicGroup_Musician(MusicGroup_Musician instance);
    partial void DeleteMusicGroup_Musician(MusicGroup_Musician instance);
    partial void InsertMusicGroup_Song(MusicGroup_Song instance);
    partial void UpdateMusicGroup_Song(MusicGroup_Song instance);
    partial void DeleteMusicGroup_Song(MusicGroup_Song instance);
    partial void InsertMusician(Musician instance);
    partial void UpdateMusician(Musician instance);
    partial void DeleteMusician(Musician instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::ProjectWPF.Properties.Settings.Default.databaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MusicGroup> MusicGroups
		{
			get
			{
				return this.GetTable<MusicGroup>();
			}
		}
		
		public System.Data.Linq.Table<Song> Songs
		{
			get
			{
				return this.GetTable<Song>();
			}
		}
		
		public System.Data.Linq.Table<MusicGroup_Musician> MusicGroup_Musicians
		{
			get
			{
				return this.GetTable<MusicGroup_Musician>();
			}
		}
		
		public System.Data.Linq.Table<MusicGroup_Song> MusicGroup_Songs
		{
			get
			{
				return this.GetTable<MusicGroup_Song>();
			}
		}
		
		public System.Data.Linq.Table<Musician> Musicians
		{
			get
			{
				return this.GetTable<Musician>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicGroup")]
	public partial class MusicGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MusicGroupID;
		
		private string _MusicGroupName;
		
		private string _MusicGroupType;
		
		private System.Nullable<System.DateTime> _MusicGroupCreatedDate;
		
		private System.Nullable<System.DateTime> _MusicGroupEndDate;
		
		private string _MusicGroupNationality;
		
		private System.Data.Linq.Binary _MusicGroupPhoto;
		
		private EntitySet<MusicGroup_Musician> _MusicGroup_Musicians;
		
		private EntitySet<MusicGroup_Song> _MusicGroup_Songs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMusicGroupIDChanging(System.Guid value);
    partial void OnMusicGroupIDChanged();
    partial void OnMusicGroupNameChanging(string value);
    partial void OnMusicGroupNameChanged();
    partial void OnMusicGroupTypeChanging(string value);
    partial void OnMusicGroupTypeChanged();
    partial void OnMusicGroupCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMusicGroupCreatedDateChanged();
    partial void OnMusicGroupEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMusicGroupEndDateChanged();
    partial void OnMusicGroupNationalityChanging(string value);
    partial void OnMusicGroupNationalityChanged();
    partial void OnMusicGroupPhotoChanging(System.Data.Linq.Binary value);
    partial void OnMusicGroupPhotoChanged();
    #endregion
		
		public MusicGroup()
		{
			this._MusicGroup_Musicians = new EntitySet<MusicGroup_Musician>(new Action<MusicGroup_Musician>(this.attach_MusicGroup_Musicians), new Action<MusicGroup_Musician>(this.detach_MusicGroup_Musicians));
			this._MusicGroup_Songs = new EntitySet<MusicGroup_Song>(new Action<MusicGroup_Song>(this.attach_MusicGroup_Songs), new Action<MusicGroup_Song>(this.detach_MusicGroup_Songs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid MusicGroupID
		{
			get
			{
				return this._MusicGroupID;
			}
			set
			{
				if ((this._MusicGroupID != value))
				{
					this.OnMusicGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupID = value;
					this.SendPropertyChanged("MusicGroupID");
					this.OnMusicGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupName", DbType="NVarChar(50)")]
		public string MusicGroupName
		{
			get
			{
				return this._MusicGroupName;
			}
			set
			{
				if ((this._MusicGroupName != value))
				{
					this.OnMusicGroupNameChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupName = value;
					this.SendPropertyChanged("MusicGroupName");
					this.OnMusicGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupType", DbType="NVarChar(50)")]
		public string MusicGroupType
		{
			get
			{
				return this._MusicGroupType;
			}
			set
			{
				if ((this._MusicGroupType != value))
				{
					this.OnMusicGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupType = value;
					this.SendPropertyChanged("MusicGroupType");
					this.OnMusicGroupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupCreatedDate", DbType="Date")]
		public System.Nullable<System.DateTime> MusicGroupCreatedDate
		{
			get
			{
				return this._MusicGroupCreatedDate;
			}
			set
			{
				if ((this._MusicGroupCreatedDate != value))
				{
					this.OnMusicGroupCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupCreatedDate = value;
					this.SendPropertyChanged("MusicGroupCreatedDate");
					this.OnMusicGroupCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> MusicGroupEndDate
		{
			get
			{
				return this._MusicGroupEndDate;
			}
			set
			{
				if ((this._MusicGroupEndDate != value))
				{
					this.OnMusicGroupEndDateChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupEndDate = value;
					this.SendPropertyChanged("MusicGroupEndDate");
					this.OnMusicGroupEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupNationality", DbType="NChar(10)")]
		public string MusicGroupNationality
		{
			get
			{
				return this._MusicGroupNationality;
			}
			set
			{
				if ((this._MusicGroupNationality != value))
				{
					this.OnMusicGroupNationalityChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupNationality = value;
					this.SendPropertyChanged("MusicGroupNationality");
					this.OnMusicGroupNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupPhoto", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary MusicGroupPhoto
		{
			get
			{
				return this._MusicGroupPhoto;
			}
			set
			{
				if ((this._MusicGroupPhoto != value))
				{
					this.OnMusicGroupPhotoChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupPhoto = value;
					this.SendPropertyChanged("MusicGroupPhoto");
					this.OnMusicGroupPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MusicGroup_MusicGroup_Musician", Storage="_MusicGroup_Musicians", ThisKey="MusicGroupID", OtherKey="MusicGroupID")]
		public EntitySet<MusicGroup_Musician> MusicGroup_Musicians
		{
			get
			{
				return this._MusicGroup_Musicians;
			}
			set
			{
				this._MusicGroup_Musicians.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MusicGroup_MusicGroup_Song", Storage="_MusicGroup_Songs", ThisKey="MusicGroupID", OtherKey="MusicGroupID")]
		public EntitySet<MusicGroup_Song> MusicGroup_Songs
		{
			get
			{
				return this._MusicGroup_Songs;
			}
			set
			{
				this._MusicGroup_Songs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MusicGroup_Musicians(MusicGroup_Musician entity)
		{
			this.SendPropertyChanging();
			entity.MusicGroup = this;
		}
		
		private void detach_MusicGroup_Musicians(MusicGroup_Musician entity)
		{
			this.SendPropertyChanging();
			entity.MusicGroup = null;
		}
		
		private void attach_MusicGroup_Songs(MusicGroup_Song entity)
		{
			this.SendPropertyChanging();
			entity.MusicGroup = this;
		}
		
		private void detach_MusicGroup_Songs(MusicGroup_Song entity)
		{
			this.SendPropertyChanging();
			entity.MusicGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Song")]
	public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SongID;
		
		private string _SongName;
		
		private System.Nullable<System.DateTime> _SongReleased;
		
		private string _SongGenre;
		
		private string _SongLength;
		
		private string _SongWriter;
		
		private EntitySet<MusicGroup_Song> _MusicGroup_Songs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSongIDChanging(System.Guid value);
    partial void OnSongIDChanged();
    partial void OnSongNameChanging(string value);
    partial void OnSongNameChanged();
    partial void OnSongReleasedChanging(System.Nullable<System.DateTime> value);
    partial void OnSongReleasedChanged();
    partial void OnSongGenreChanging(string value);
    partial void OnSongGenreChanged();
    partial void OnSongLengthChanging(string value);
    partial void OnSongLengthChanged();
    partial void OnSongWriterChanging(string value);
    partial void OnSongWriterChanged();
    #endregion
		
		public Song()
		{
			this._MusicGroup_Songs = new EntitySet<MusicGroup_Song>(new Action<MusicGroup_Song>(this.attach_MusicGroup_Songs), new Action<MusicGroup_Song>(this.detach_MusicGroup_Songs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid SongID
		{
			get
			{
				return this._SongID;
			}
			set
			{
				if ((this._SongID != value))
				{
					this.OnSongIDChanging(value);
					this.SendPropertyChanging();
					this._SongID = value;
					this.SendPropertyChanged("SongID");
					this.OnSongIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongName", DbType="NVarChar(50)")]
		public string SongName
		{
			get
			{
				return this._SongName;
			}
			set
			{
				if ((this._SongName != value))
				{
					this.OnSongNameChanging(value);
					this.SendPropertyChanging();
					this._SongName = value;
					this.SendPropertyChanged("SongName");
					this.OnSongNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongReleased", DbType="Date")]
		public System.Nullable<System.DateTime> SongReleased
		{
			get
			{
				return this._SongReleased;
			}
			set
			{
				if ((this._SongReleased != value))
				{
					this.OnSongReleasedChanging(value);
					this.SendPropertyChanging();
					this._SongReleased = value;
					this.SendPropertyChanged("SongReleased");
					this.OnSongReleasedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongGenre", DbType="NVarChar(50)")]
		public string SongGenre
		{
			get
			{
				return this._SongGenre;
			}
			set
			{
				if ((this._SongGenre != value))
				{
					this.OnSongGenreChanging(value);
					this.SendPropertyChanging();
					this._SongGenre = value;
					this.SendPropertyChanged("SongGenre");
					this.OnSongGenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongLength", DbType="NChar(10)")]
		public string SongLength
		{
			get
			{
				return this._SongLength;
			}
			set
			{
				if ((this._SongLength != value))
				{
					this.OnSongLengthChanging(value);
					this.SendPropertyChanging();
					this._SongLength = value;
					this.SendPropertyChanged("SongLength");
					this.OnSongLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongWriter", DbType="NVarChar(50)")]
		public string SongWriter
		{
			get
			{
				return this._SongWriter;
			}
			set
			{
				if ((this._SongWriter != value))
				{
					this.OnSongWriterChanging(value);
					this.SendPropertyChanging();
					this._SongWriter = value;
					this.SendPropertyChanged("SongWriter");
					this.OnSongWriterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_MusicGroup_Song", Storage="_MusicGroup_Songs", ThisKey="SongID", OtherKey="SongID")]
		public EntitySet<MusicGroup_Song> MusicGroup_Songs
		{
			get
			{
				return this._MusicGroup_Songs;
			}
			set
			{
				this._MusicGroup_Songs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MusicGroup_Songs(MusicGroup_Song entity)
		{
			this.SendPropertyChanging();
			entity.Song = this;
		}
		
		private void detach_MusicGroup_Songs(MusicGroup_Song entity)
		{
			this.SendPropertyChanging();
			entity.Song = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicGroup_Musician")]
	public partial class MusicGroup_Musician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MusicGroupID;
		
		private System.Guid _MusicianID;
		
		private EntityRef<MusicGroup> _MusicGroup;
		
		private EntityRef<Musician> _Musician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMusicGroupIDChanging(System.Guid value);
    partial void OnMusicGroupIDChanged();
    partial void OnMusicianIDChanging(System.Guid value);
    partial void OnMusicianIDChanged();
    #endregion
		
		public MusicGroup_Musician()
		{
			this._MusicGroup = default(EntityRef<MusicGroup>);
			this._Musician = default(EntityRef<Musician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MusicGroupID
		{
			get
			{
				return this._MusicGroupID;
			}
			set
			{
				if ((this._MusicGroupID != value))
				{
					if (this._MusicGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMusicGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupID = value;
					this.SendPropertyChanged("MusicGroupID");
					this.OnMusicGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MusicianID
		{
			get
			{
				return this._MusicianID;
			}
			set
			{
				if ((this._MusicianID != value))
				{
					if (this._Musician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMusicianIDChanging(value);
					this.SendPropertyChanging();
					this._MusicianID = value;
					this.SendPropertyChanged("MusicianID");
					this.OnMusicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MusicGroup_MusicGroup_Musician", Storage="_MusicGroup", ThisKey="MusicGroupID", OtherKey="MusicGroupID", IsForeignKey=true)]
		public MusicGroup MusicGroup
		{
			get
			{
				return this._MusicGroup.Entity;
			}
			set
			{
				MusicGroup previousValue = this._MusicGroup.Entity;
				if (((previousValue != value) 
							|| (this._MusicGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MusicGroup.Entity = null;
						previousValue.MusicGroup_Musicians.Remove(this);
					}
					this._MusicGroup.Entity = value;
					if ((value != null))
					{
						value.MusicGroup_Musicians.Add(this);
						this._MusicGroupID = value.MusicGroupID;
					}
					else
					{
						this._MusicGroupID = default(System.Guid);
					}
					this.SendPropertyChanged("MusicGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Musician_MusicGroup_Musician", Storage="_Musician", ThisKey="MusicianID", OtherKey="MusicianID", IsForeignKey=true)]
		public Musician Musician
		{
			get
			{
				return this._Musician.Entity;
			}
			set
			{
				Musician previousValue = this._Musician.Entity;
				if (((previousValue != value) 
							|| (this._Musician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Musician.Entity = null;
						previousValue.MusicGroup_Musicians.Remove(this);
					}
					this._Musician.Entity = value;
					if ((value != null))
					{
						value.MusicGroup_Musicians.Add(this);
						this._MusicianID = value.MusicianID;
					}
					else
					{
						this._MusicianID = default(System.Guid);
					}
					this.SendPropertyChanged("Musician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MusicGroup_Song")]
	public partial class MusicGroup_Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MusicGroupID;
		
		private System.Guid _SongID;
		
		private EntityRef<MusicGroup> _MusicGroup;
		
		private EntityRef<Song> _Song;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMusicGroupIDChanging(System.Guid value);
    partial void OnMusicGroupIDChanged();
    partial void OnSongIDChanging(System.Guid value);
    partial void OnSongIDChanged();
    #endregion
		
		public MusicGroup_Song()
		{
			this._MusicGroup = default(EntityRef<MusicGroup>);
			this._Song = default(EntityRef<Song>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicGroupID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MusicGroupID
		{
			get
			{
				return this._MusicGroupID;
			}
			set
			{
				if ((this._MusicGroupID != value))
				{
					if (this._MusicGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMusicGroupIDChanging(value);
					this.SendPropertyChanging();
					this._MusicGroupID = value;
					this.SendPropertyChanged("MusicGroupID");
					this.OnMusicGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SongID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SongID
		{
			get
			{
				return this._SongID;
			}
			set
			{
				if ((this._SongID != value))
				{
					if (this._Song.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSongIDChanging(value);
					this.SendPropertyChanging();
					this._SongID = value;
					this.SendPropertyChanged("SongID");
					this.OnSongIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MusicGroup_MusicGroup_Song", Storage="_MusicGroup", ThisKey="MusicGroupID", OtherKey="MusicGroupID", IsForeignKey=true)]
		public MusicGroup MusicGroup
		{
			get
			{
				return this._MusicGroup.Entity;
			}
			set
			{
				MusicGroup previousValue = this._MusicGroup.Entity;
				if (((previousValue != value) 
							|| (this._MusicGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MusicGroup.Entity = null;
						previousValue.MusicGroup_Songs.Remove(this);
					}
					this._MusicGroup.Entity = value;
					if ((value != null))
					{
						value.MusicGroup_Songs.Add(this);
						this._MusicGroupID = value.MusicGroupID;
					}
					else
					{
						this._MusicGroupID = default(System.Guid);
					}
					this.SendPropertyChanged("MusicGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_MusicGroup_Song", Storage="_Song", ThisKey="SongID", OtherKey="SongID", IsForeignKey=true)]
		public Song Song
		{
			get
			{
				return this._Song.Entity;
			}
			set
			{
				Song previousValue = this._Song.Entity;
				if (((previousValue != value) 
							|| (this._Song.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Song.Entity = null;
						previousValue.MusicGroup_Songs.Remove(this);
					}
					this._Song.Entity = value;
					if ((value != null))
					{
						value.MusicGroup_Songs.Add(this);
						this._SongID = value.SongID;
					}
					else
					{
						this._SongID = default(System.Guid);
					}
					this.SendPropertyChanged("Song");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Musician")]
	public partial class Musician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MusicianID;
		
		private string _MusicianName;
		
		private string _MusicianSurname;
		
		private System.Nullable<System.DateTime> _MusicianDateBirth;
		
		private string _MusicianInstrument;
		
		private string _MusicianNationality;
		
		private string _MusicianSex;
		
		private EntitySet<MusicGroup_Musician> _MusicGroup_Musicians;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMusicianIDChanging(System.Guid value);
    partial void OnMusicianIDChanged();
    partial void OnMusicianNameChanging(string value);
    partial void OnMusicianNameChanged();
    partial void OnMusicianSurnameChanging(string value);
    partial void OnMusicianSurnameChanged();
    partial void OnMusicianDateBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnMusicianDateBirthChanged();
    partial void OnMusicianInstrumentChanging(string value);
    partial void OnMusicianInstrumentChanged();
    partial void OnMusicianNationalityChanging(string value);
    partial void OnMusicianNationalityChanged();
    partial void OnMusicianSexChanging(string value);
    partial void OnMusicianSexChanged();
    #endregion
		
		public Musician()
		{
			this._MusicGroup_Musicians = new EntitySet<MusicGroup_Musician>(new Action<MusicGroup_Musician>(this.attach_MusicGroup_Musicians), new Action<MusicGroup_Musician>(this.detach_MusicGroup_Musicians));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid MusicianID
		{
			get
			{
				return this._MusicianID;
			}
			set
			{
				if ((this._MusicianID != value))
				{
					this.OnMusicianIDChanging(value);
					this.SendPropertyChanging();
					this._MusicianID = value;
					this.SendPropertyChanged("MusicianID");
					this.OnMusicianIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianName", DbType="NVarChar(50)")]
		public string MusicianName
		{
			get
			{
				return this._MusicianName;
			}
			set
			{
				if ((this._MusicianName != value))
				{
					this.OnMusicianNameChanging(value);
					this.SendPropertyChanging();
					this._MusicianName = value;
					this.SendPropertyChanged("MusicianName");
					this.OnMusicianNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianSurname", DbType="NVarChar(50)")]
		public string MusicianSurname
		{
			get
			{
				return this._MusicianSurname;
			}
			set
			{
				if ((this._MusicianSurname != value))
				{
					this.OnMusicianSurnameChanging(value);
					this.SendPropertyChanging();
					this._MusicianSurname = value;
					this.SendPropertyChanged("MusicianSurname");
					this.OnMusicianSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianDateBirth", DbType="Date")]
		public System.Nullable<System.DateTime> MusicianDateBirth
		{
			get
			{
				return this._MusicianDateBirth;
			}
			set
			{
				if ((this._MusicianDateBirth != value))
				{
					this.OnMusicianDateBirthChanging(value);
					this.SendPropertyChanging();
					this._MusicianDateBirth = value;
					this.SendPropertyChanged("MusicianDateBirth");
					this.OnMusicianDateBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianInstrument", DbType="NVarChar(50)")]
		public string MusicianInstrument
		{
			get
			{
				return this._MusicianInstrument;
			}
			set
			{
				if ((this._MusicianInstrument != value))
				{
					this.OnMusicianInstrumentChanging(value);
					this.SendPropertyChanging();
					this._MusicianInstrument = value;
					this.SendPropertyChanged("MusicianInstrument");
					this.OnMusicianInstrumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianNationality", DbType="NChar(10)")]
		public string MusicianNationality
		{
			get
			{
				return this._MusicianNationality;
			}
			set
			{
				if ((this._MusicianNationality != value))
				{
					this.OnMusicianNationalityChanging(value);
					this.SendPropertyChanging();
					this._MusicianNationality = value;
					this.SendPropertyChanged("MusicianNationality");
					this.OnMusicianNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MusicianSex", DbType="Char(10)")]
		public string MusicianSex
		{
			get
			{
				return this._MusicianSex;
			}
			set
			{
				if ((this._MusicianSex != value))
				{
					this.OnMusicianSexChanging(value);
					this.SendPropertyChanging();
					this._MusicianSex = value;
					this.SendPropertyChanged("MusicianSex");
					this.OnMusicianSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Musician_MusicGroup_Musician", Storage="_MusicGroup_Musicians", ThisKey="MusicianID", OtherKey="MusicianID")]
		public EntitySet<MusicGroup_Musician> MusicGroup_Musicians
		{
			get
			{
				return this._MusicGroup_Musicians;
			}
			set
			{
				this._MusicGroup_Musicians.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MusicGroup_Musicians(MusicGroup_Musician entity)
		{
			this.SendPropertyChanging();
			entity.Musician = this;
		}
		
		private void detach_MusicGroup_Musicians(MusicGroup_Musician entity)
		{
			this.SendPropertyChanging();
			entity.Musician = null;
		}
	}
}
#pragma warning restore 1591
